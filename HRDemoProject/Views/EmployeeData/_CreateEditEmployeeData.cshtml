@model HRDemoProject.Models.Employee.EmployeeFilters

<div class="container">
    <form class="needs-validation" novalidate>
        <input type="hidden" id="hdnId" name="Id" value="@Model.EmployeeData.Id" />
        <div class="mb-3 text-center">
            <div id="divResult"></div>
        </div>
        <div class="mb-3">
            <label for="FirstName" class="form-label">First Name:</label>
            <input type="text" class="form-control" id="txtFirstName" name="FirstName" value="@Model.EmployeeData.FirstName" placeholder="First Name" required  />
            <div class="invalid-feedback">First name is required</div>
        </div>
        <div class="mb-3">
            <label for="LastName" class="form-label">Last Name:</label>
            <input type="text" class="form-control" id="txtLastName" name="LastName" value="@Model.EmployeeData.LastName" placeholder="Last Name" required />
            <div class="invalid-feedback">Last name is required</div>
        </div>
        <div class="mb-3">
            <label for="EmailAddress" class="form-label">Email Address:</label>
            <input type="email" class="form-control" id="txtEmailAddress" name="EmailAddress" value="@Model.EmployeeData.EmailAddress" placeholder="Email Address" required />
            <div class="invalid-feedback">Valid email address is required</div>
        </div>
        <div class="mb-3">
            <label for="DateOfBirth" class="form-label">Date of Birth:</label>
            <input type="date" class="form-control" id="txtDateOfBirth" name="DateOfBirth" value="@Model.EmployeeData.DateOfBirth?.ToString("yyyy-MM-dd")" placeholder="Date of Birth" required max="@DateTime.Now.AddYears(-16).ToString("yyyy-MM-dd")" />
            <div class="invalid-feedback">Enter a valid date of birth, cannot be in the future and minimum 16 years old</div>
        </div>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                var dateOfBirthInput = document.getElementById('txtDateOfBirth');
                var today = new Date();
                var maxDate = new Date(today.getFullYear() - 16, today.getMonth(), today.getDate());
                dateOfBirthInput.max = maxDate.toISOString().split('T')[0];
            });
        </script>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                var dateOfBirthInput = document.getElementById('txtDateOfBirth');
                var today = new Date();
                var maxDate = new Date(today.getFullYear() - 18, today.getMonth(), today.getDate());
                dateOfBirthInput.max = maxDate.toISOString().split('T')[0];
            });
        </script>
        <div class="mb-3">
            <label for="DepartmentId" class="form-label">Department:</label>
            <select id="ddlDepartment" class="form-control" name="DepartmentId" required>
                @if (@Model.EmployeeData.Id != 0)
                {
                    @foreach (var department in Model.DepartmentDataResponse.DepartmentDataList)
                    {
                        <option value="@department.Id" selected="@(department.Id == Model.EmployeeData.DepartmentId)">@department.Name</option>
                    }
                }
                else
                {
                    @foreach (var department in Model.DepartmentDataResponse.DepartmentDataList)
                    {
                        <option value="@department.Id">@department.Name</option>
                    }
                }
            </select>
            <div class="invalid-feedback">Department is required</div>
        </div>
        <div class="mb-3">
            <label for="EmployeeStatusId" class="form-label">Employee Status:</label>
            <select id="ddlEmployeeStatus" class="form-control" name="EmployeeStatusId" required>
                @if (@Model.EmployeeData.Id != 0)
                {
                    @foreach (var employeeStatus in Model.EmployeeStatusDataResponse.EmployeeStatusList)
                    {
                        <option value="@employeeStatus.Id" selected="@(employeeStatus.Id == Model.EmployeeData.EmployeeStatusId)">@employeeStatus.Name</option>
                    }
                }
                else
                { 
                    @foreach (var employeeStatus in Model.EmployeeStatusDataResponse.EmployeeStatusList)
                    {
                        <option value="@employeeStatus.Id">@employeeStatus.Name</option>
                    }
                }
            </select>
            <div class="invalid-feedback">Employee Status is required</div>
        </div>
        <div class="mb-3">
            <label for="EmployeeNumber" class="form-label">Employee Number:</label>
            <input type="text" class="form-control" id="txtEmployeeNumber" name="EmployeeNumber" value="@Model.EmployeeData.EmployeeNumber" required placeholder="Employee Number" />
            <div class="invalid-feedback">Employee Number is required</div>
        </div>
        <div class="mb-3">
            <div class="d-flex justify-content-between">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="reloadGrid()">Cancel</button>
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
        </div>
    </form>
</div>

<script>
    (function () {
        'use strict'
        var forms = document.querySelectorAll('.needs-validation')
        Array.prototype.slice.call(forms)
            .forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    } else {
                        event.preventDefault();
                        saveEmployeeChanges();
                    }
                    form.classList.add('was-validated')
                }, false)
            })
    })()

    function saveEmployeeChanges() {
        var employeeData = {
            id: $('#hdnId').val(),
            firstName: $('#txtFirstName').val(),
            lastName: $('#txtLastName').val(),
            emailAddress: $('#txtEmailAddress').val(),
            dateOfBirth: $('#txtDateOfBirth').val(),
            departmentId: $("#ddlDepartment option:selected").val(),
            employeeStatusId: $("#ddlEmployeeStatus option:selected").val(),
            employeeNumber: $('#txtEmployeeNumber').val(),
        };

        $.ajax({
            url: '@Url.Action("SaveEmployeeData", "EmployeeData")',
            type: 'POST',
            data: employeeData,
            dataType: "json",
            success: function (response) {
                if(response.isSuccess == true)
                {
                    var alertDiv = $('<div class="alert alert-success fade show" role="alert">')
                            .text('Success saving employee data')
                            $('#divResult').html(alertDiv);
                            
                    reloadGrid();

                }
                else
                {
                    var alertDiv = $('<div class="alert alert-danger fade show" role="alert">')
                            .text('Error saving employee data: ' + response.message)
                            $('#divResult').html(alertDiv);
                }
            }
        });
    }

    function reloadGrid(){
        setTimeout(function() {
            $('#employeeModal').modal('hide');
            GetFilteredData();
        }, 2000);
    }
</script>
